@page "/master/Gateway"

@inject IJSRuntime jsRuntime
@inject NavigationManager NavMgr
@inject IToastService toastService
@inject GatewayService service
@inject UserProfileService Userservice
@inject Blazored.LocalStorage.ILocalStorageService localStorage


@using System.IO
<h1>Daftar Gateway</h1>

<p>Gunakan halaman ini untuk melihat info gateway.</p>

@if (DataGateway == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
            <table id="gridData" name="gridData" class="table table-striped">
                <thead>
                    <tr>
                        <th>Tanggal Pasang</th>
                        <th>GatewayID</th>
                        <th>Nama</th>
                        <th>Lokasi</th>
                        <th>Keterangan</th>
                        <th>Cluster</th>
                        <th>Status</th>
                        <th>Actions</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var item in DataGateway)
                    {
                        <tr>

                            <td>@item.TanggalPasang?.ToString("dd/MMM/yyyy HH:mm")</td>
                            <td>@item.GatewayId</td>
                            <td>@item.Nama</td>
                            <td>@item.Lokasi</td>
                            <td>@item.Keterangan</td>
                            <td>@item.ClusterName</td>
                            <td>@item.Status.ToString()</td>
                            <td>
                                @if (HasLogin)
                                {
                                    <input type="button" class="btn btn-primary btn-sm mt-1" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                                    <input type="button" class="btn btn-danger btn-sm mt-1" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />
                                }
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}
@if (HasLogin)
{
    <div>
        <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Masukan Gateway Baru" @onclick="(() => InitializeitemObject())" />
    </div>
}
<ConfirmDialog OnClick="@Delete" />
<GatewayDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</GatewayDetail>

@code {
    bool HasLogin = false;
    GatewayDetail detail;

    string customHeader = string.Empty;
    List<Gateway> DataGateway;
    Gateway itemObject = new Gateway();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;

    async Task DownloadFile(string Url)
    {
        if (!string.IsNullOrEmpty(Url))
        {
            NavMgr.NavigateTo(Url, true);
        }
        else
        {
            toastService.ShowError("Url kosong atau tidak valid.");
        }

    }



    protected override async Task OnInitializedAsync()
    {


        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            HasLogin = await Userservice.GetUserRole(UserName) == Roles.Admin;
        }


        DataGateway = await service.GetAllData();


    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataGateway != null && DataGateway.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }
        if (firstRender)
        {

        }
    }

    private void InitializeitemObject()
    {

        itemObject = new Gateway();


        //detail.DocumentUrl = "";

        //itemObject.Id = -1;

        customHeader = "Masukan Gateway Baru";
    }
    private async void DataChanged()
    {
        DataGateway = await service.GetAllData();
        StateHasChanged();
    }

    private void PrepareForEdit(Gateway item)
    {
        customHeader = "Ubah Data Gateway";
        itemObject = item;
        //detail.DocumentUrl = item.DocumentUrl;
    }
    private void PrepareForDelete(Gateway item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        var task = await service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        DataGateway = await service.GetAllData();
        itemObject = new Gateway() { Id = -1 };
    }

    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

}
