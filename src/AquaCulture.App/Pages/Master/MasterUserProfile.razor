@page "/master/UserProfile"

@inject IJSRuntime jsRuntime
@inject NavigationManager NavMgr
@namespace AquaCulture.Web.Pages.Master
@inject IToastService toastService
@inject UserProfileService service
@inject UserProfileService Userservice
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@using System.IO
<h1>Data User</h1>

<p>Gunakan halaman ini untuk mengatur data user.</p>

@if (HasLogin)
{
    <div class="row">
        <div class="col col-12">
            <div class="form-group">
                <label for="nim">Upload Data Anggota</label>
                <b><a href="/template/UserProfileTemplate.xlsx">Download template data anggota</a></b>
                <div class="alert alert-warning"> pilih dokumen lalu tunggu sampai dokumen selesai di upload.</div>
                <InputFile OnChange="HandleFileSelected" />
            </div>
        </div>

    </div>
}

<div class="row">
    <div class="col col-12">
        <div class="form-group">
            <label for="export">Export Data Anggota</label>
            <div class="alert alert-success"> data akan di export dalam bentuk excel file.</div>
            <button class="btn btn-success mt-1 mb-1" @onclick="Export">Export</button>

        </div>
    </div>
</div>

@if (DataUserProfile == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <body onbeforeunload="TestDataTablesRemove('#gridData')">
        <div class="table-responsive">
            <table id="gridData" name="gridData" class="table table-striped">
                <thead>
                    <tr>
                        <th>Nama</th>
                        <th>Telepon</th>
                        <th>Email</th>
                        <th>Status</th>
                        <th>Alamat</th>
                        <th>Foto</th>

                        <th>Actions</th>
                    </tr>

                </thead>
                <tbody>
                    @foreach (var item in DataUserProfile)
                    {
                        <tr>
                            <td>@item.FullName</td>
                            <td>@item.Phone</td>
                            <td>@item.Email</td>
                            <td>@(item.Aktif?"Aktif":"Tidak Aktif")</td>
                            <td>@item.Alamat</td>
                            <td>
                                @if (string.IsNullOrEmpty(item.PicUrl))
                                {
                                    <p>Tidak ada foto</p>
                                }
                                else
                                {
                                    <img style="width: 150px; height: 150px;object-fit: cover;" src="@item?.PicUrl?" alt="foto" />

                                }
                            </td>
                            <td>

                                @if (HasLogin)
                                {
                                    <input type="button" class="btn btn-primary btn-sm mt-1" @onclick="(() => PrepareForEdit(item))" data-toggle="modal" data-target="#taskModal" value="Ubah" />
                                }
                                @if (CurrentRole == Roles.Admin)
                                {
                                    <input type="button" class="btn btn-danger btn-sm mt-1" @onclick="(() => PrepareForDelete(item))" data-toggle="modal" data-target="#confirmDeleteModal" value="Hapus" />
                                }
                            </td>

                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </body>
}
@if (HasLogin)
{
    <div>
        <input type="button" data-toggle="modal" data-target="#taskModal" class="btn btn-primary" value="Tambah User" @onclick="(() => InitializeitemObject())" />
    </div>
}

<ConfirmDialog OnClick="@Delete" />
<UserProfileDetail @ref="detail" TaskObject=@itemObject DataChanged="@DataChanged">
    <CustomHeader>@customHeader</CustomHeader>
</UserProfileDetail>

@code {
    bool HasLogin = false;
    UserProfileDetail detail;
    
    string customHeader = string.Empty;
    List<UserProfile> DataUserProfile;
    UserProfile itemObject = new UserProfile();
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    string UserName;
    Roles CurrentRole;

      async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        List<IBrowserFile> loadedFiles = new();
        foreach (var file1 in e.GetMultipleFiles(1))
        {
            try
            {
                loadedFiles.Add(file1);
            }
            catch (Exception ex)
            {
                //Logger.LogError("File: {Filename} Error: {Error}",file.Name, ex.Message);
            }
        }
        var file = loadedFiles.FirstOrDefault();
        if (file != null)
        {
            // Just load into .NET memory to show it can be done
            // Alternatively it could be saved to disk, or parsed in memory, or similar

            //var ms = new MemoryStream();
            //await file.Data.CopyToAsync(ms);
            var ms = new MemoryStream();
            await file.OpenReadStream().CopyToAsync(ms);
            //var bytes = ImageHelper.FixedSize(ms, 300, 300, false);
            //string newName = $"dokumen_{DateTime.Now.ToString("dd_MM_yyyy")}_{Path.GetFileNameWithoutExtension(file.Name)}{Path.GetExtension(file.Name)}";
            var bytes = ms.ToArray();
            ms.Dispose();
            var tempFile = Path.GetTempFileName() + ".xlsx";

            File.WriteAllBytes(tempFile, bytes);

            var data = UserProfileService.ReadExcel(tempFile);
            if (data == null)
                toastService.ShowError("Ada kesalahan pada data", "Gagal Upload");
            else
            {
                /*
                var hasil = service.ImportData(data);
                if (hasil.IsSucceed)
                {
                    RefreshData();
                    toastService.ShowSuccess("Data berhasil di import", "Berhasil");

                }                    
                else
                {
                    toastService.ShowError($"Gagal import data: {hasil.Message}", "Gagal");
                }*/
            }
            StateHasChanged();
        }
    }

    async Task Export()
    {
        try
        {
            var bytes = await service.ExportToExcelAsync();
            await FileUtil.SaveAs(jsRuntime, "UserProfile.xlsx", bytes);
        }
        catch (Exception ex)
        {
            toastService.ShowError(ex.Message);
        }
    }
    
    protected override async Task OnInitializedAsync()
    {

        //if (Userservice == null) Userservice = new UserProfileService();
        var user = (await authenticationStateTask).User;

        if (user.Identity.IsAuthenticated)
        {
            UserName = user.Identity.Name;
            CurrentRole = await Userservice.GetUserRole(UserName);
            HasLogin = CurrentRole != Roles.User;
        }



        await RefreshData();
        
    }

    async Task RefreshData()
    {
        DataUserProfile = await service.GetAllData();
    }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (DataUserProfile != null && DataUserProfile.Count > 0)
        {

            await jsRuntime.InvokeAsync<object>("TestDataTablesAdd", "#gridData");
        }

    }

    private void InitializeitemObject()
    {

        itemObject = new UserProfile();



        customHeader = "Tambah User";
    }
    private async void DataChanged()
    {
        await RefreshData();
        StateHasChanged();
    }

    private void PrepareForEdit(UserProfile item)
    {
        customHeader = "Ubah Data User";
        itemObject = item;
        //detail.DocumentUrl = item.DocumentUrl;
    }
    private void PrepareForDelete(UserProfile item)
    {
        itemObject = item;
    }
    private async Task Delete()
    {
        var task = await service.DeleteData(itemObject.Id);
        await jsRuntime.InvokeAsync<object>("CloseModal", "confirmDeleteModal");
        await RefreshData();
        itemObject = new UserProfile() { Id = -1 };
    }
    
    private async System.Threading.Tasks.Task applyPager(string TableName)
    {
        await jsRuntime.InvokeAsync<object>("applyPager", TableName);
    }

}
